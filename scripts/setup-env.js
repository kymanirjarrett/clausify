// ============================================
// FILE: scripts/setup-env.js
// ============================================
// Run with: node scripts/setup-env.js
// This script helps set up .env.local on a new machine

import fs from 'fs';
import path from 'path';
import readline from 'readline';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const envPath = path.join(__dirname, '..', '.env.local');

console.log('üöÄ Clausify Environment Setup\n');
console.log('This script will help you create your .env.local file.\n');

// Check if .env.local already exists
if (fs.existsSync(envPath)) {
  rl.question('‚ö†Ô∏è  .env.local already exists. Overwrite? (y/N): ', (answer) => {
    if (answer.toLowerCase() !== 'y') {
      console.log('‚ùå Setup cancelled. Existing .env.local preserved.');
      rl.close();
      return;
    }
    startSetup();
  });
} else {
  startSetup();
}

function startSetup() {
  const envVars = {};
  
  console.log('\nüìù Please provide the following values:');
  console.log('(Press Enter to skip optional fields)\n');
  
  const questions = [
    {
      key: 'NEXT_PUBLIC_SUPABASE_URL',
      prompt: 'üîπ Supabase URL (https://...supabase.co): ',
      required: true,
      validate: (val) => val.startsWith('https://') && val.includes('supabase.co')
    },
    {
      key: 'NEXT_PUBLIC_SUPABASE_ANON_KEY',
      prompt: 'üîπ Supabase Anon Key (eyJ...): ',
      required: true,
      validate: (val) => val.startsWith('eyJ')
    },
    {
      key: 'GROQ_API_KEY',
      prompt: 'üîπ Groq API Key (gsk_...): ',
      required: true,
      validate: (val) => val.startsWith('gsk_')
    },
    {
      key: 'GEMINI_API_KEY',
      prompt: 'üîπ Gemini API Key (AIza...) [Optional]: ',
      required: false,
      validate: (val) => !val || val.startsWith('AIza')
    },
    {
      key: 'NEXT_PUBLIC_APP_URL',
      prompt: 'üîπ App URL [Default: http://localhost:3000]: ',
      required: false,
      default: 'http://localhost:3000'
    }
  ];
  
  askQuestion(0);
  
  function askQuestion(index) {
    if (index >= questions.length) {
      createEnvFile();
      return;
    }
    
    const q = questions[index];
    
    rl.question(q.prompt, (answer) => {
      const value = answer.trim() || q.default || '';
      
      // Validation
      if (q.required && !value) {
        console.log(`‚ùå This field is required. Please try again.`);
        askQuestion(index);
        return;
      }
      
      if (value && q.validate && !q.validate(value)) {
        console.log(`‚ùå Invalid format. Please check and try again.`);
        askQuestion(index);
        return;
      }
      
      if (value) {
        envVars[q.key] = value;
      }
      
      askQuestion(index + 1);
    });
  }
  
  function createEnvFile() {
    console.log('\nüìÑ Creating .env.local...');
    
    let content = '# Clausify Environment Variables\n';
    content += '# Generated by setup-env.js\n';
    content += `# Created: ${new Date().toISOString()}\n\n`;
    
    content += '# Supabase Configuration\n';
    content += `NEXT_PUBLIC_SUPABASE_URL=${envVars.NEXT_PUBLIC_SUPABASE_URL}\n`;
    content += `NEXT_PUBLIC_SUPABASE_ANON_KEY=${envVars.NEXT_PUBLIC_SUPABASE_ANON_KEY}\n\n`;
    
    content += '# AI API Keys\n';
    content += `GROQ_API_KEY=${envVars.GROQ_API_KEY}\n`;
    if (envVars.GEMINI_API_KEY) {
      content += `GEMINI_API_KEY=${envVars.GEMINI_API_KEY}\n`;
    }
    content += '\n';
    
    content += '# App Configuration\n';
    content += `NEXT_PUBLIC_APP_URL=${envVars.NEXT_PUBLIC_APP_URL}\n`;
    
    try {
      fs.writeFileSync(envPath, content);
      console.log('‚úÖ .env.local created successfully!');
      console.log('\nüìã Summary:');
      console.log(`   - Supabase URL: ${envVars.NEXT_PUBLIC_SUPABASE_URL}`);
      console.log(`   - Groq API Key: ${maskKey(envVars.GROQ_API_KEY)}`);
      if (envVars.GEMINI_API_KEY) {
        console.log(`   - Gemini API Key: ${maskKey(envVars.GEMINI_API_KEY)}`);
      }
      console.log(`   - App URL: ${envVars.NEXT_PUBLIC_APP_URL}`);
      console.log('\nüéâ Setup complete! Run "npm run dev" to start the app.');
    } catch (error) {
      console.error('‚ùå Error creating .env.local:', error.message);
    }
    
    rl.close();
  }
}

function maskKey(key) {
  if (key.length <= 8) return '***';
  return key.substring(0, 4) + '...' + key.substring(key.length - 4);
}